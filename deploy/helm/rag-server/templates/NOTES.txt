üöÄ NVIDIA RAG Blueprint has been successfully deployed!

Chart Version: {{ .Chart.Version }}
App Version: {{ .Chart.AppVersion }}
Release Name: {{ .Release.Name }}
Namespace: {{ .Release.Namespace }}

üìã DEPLOYMENT STATUS
===================

Your NVIDIA RAG Blueprint deployment includes:

‚úÖ RAG Server ({{ .Values.appName }})
‚úÖ Ingestor Server ({{ .Values.appName }}-ingestor-server)
{{- if .Values.frontend.enabled }}
‚úÖ Frontend UI ({{ .Values.appName }}-frontend)
{{- end }}
{{- if index .Values "opentelemetry-collector" "enabled" }}
‚úÖ OpenTelemetry Collector (observability)
{{- end }}
{{- if .Values.zipkin.enabled }}
‚úÖ Zipkin Tracing UI
{{- end }}

üåê ACCESS YOUR APPLICATION
==========================

1. **RAG Server API**:
   {{- if and .Values.platform (eq .Values.platform.type "openshift") }}
   # For OpenShift - Check for auto-created routes:
   oc get routes -n {{ .Release.Namespace }}
   
   # Or create port-forward:
   oc port-forward service/{{ .Values.appName }} 8081:8081 -n {{ .Release.Namespace }}
   {{- else }}
   kubectl port-forward service/{{ .Values.appName }} 8081:8081 -n {{ .Release.Namespace }}
   {{- end }}
   API Base URL: http://localhost:8081/v1

2. **Ingestor Server** (for document upload):
   {{- if and .Values.platform (eq .Values.platform.type "openshift") }}
   oc port-forward service/{{ .Values.appName }}-ingestor-server 8082:8082 -n {{ .Release.Namespace }}
   {{- else }}
   kubectl port-forward service/{{ .Values.appName }}-ingestor-server 8082:8082 -n {{ .Release.Namespace }}
   {{- end }}
   API Base URL: http://localhost:8082/v1

{{- if .Values.frontend.enabled }}
3. **Frontend UI**:
   {{- if and .Values.platform (eq .Values.platform.type "openshift") }}
   oc port-forward service/{{ .Values.appName }}-frontend 3000:3000 -n {{ .Release.Namespace }}
   {{- else }}
   kubectl port-forward service/{{ .Values.appName }}-frontend 3000:3000 -n {{ .Release.Namespace }}
   {{- end }}
   UI URL: http://localhost:3000
{{- end }}

{{- if .Values.zipkin.enabled }}
4. **Zipkin Tracing UI**:
   {{- if and .Values.platform (eq .Values.platform.type "openshift") }}
   oc port-forward service/{{ .Values.appName }}-zipkin 9411:9411 -n {{ .Release.Namespace }}
   {{- else }}
   kubectl port-forward service/{{ .Values.appName }}-zipkin 9411:9411 -n {{ .Release.Namespace }}
   {{- end }}
   Zipkin URL: http://localhost:9411
{{- end }}

üîç VERIFY DEPLOYMENT
====================

Check that all pods are running:
{{- if and .Values.platform (eq .Values.platform.type "openshift") }}
oc get pods -n {{ .Release.Namespace }}
{{- else }}
kubectl get pods -n {{ .Release.Namespace }}
{{- end }}

Test the health endpoints:
curl http://localhost:8081/v1/health
curl http://localhost:8082/v1/health

üß™ RUNNING TESTS
================

Execute the deployment tests:
{{- if and .Values.platform (eq .Values.platform.type "openshift") }}
oc test {{ .Release.Name }} -n {{ .Release.Namespace }}
{{- else }}
helm test {{ .Release.Name }} -n {{ .Release.Namespace }}
{{- end }}

üìö GETTING STARTED
==================

1. **Upload a document**:
   curl -X POST "http://localhost:8082/v1/documents" \
     -H "Content-Type: multipart/form-data" \
     -F "file=@your-document.pdf"

2. **Query the RAG system**:
   curl -X POST "http://localhost:8081/v1/generate" \
     -H "Content-Type: application/json" \
     -d '{"query": "What is this document about?"}'

3. **Use the Frontend UI**:
   Navigate to http://localhost:3000 for an interactive experience

‚ö†Ô∏è  IMPORTANT NOTES
===================

{{- if not (or (index .Values "nim-llm" "enabled") (index .Values "nvidia-nim-llama-32-nv-embedqa-1b-v2" "enabled")) }}
üî∂ GPU NIMs are disabled - this is a CPU-only deployment
   ‚Ä¢ Limited to basic RAG functionality
   ‚Ä¢ Advanced features (VLM, guardrails, reranking) are disabled
   ‚Ä¢ For full functionality, enable GPU NIMs in values.yaml
{{- end }}

{{- if and .Values.platform (eq .Values.platform.type "openshift") }}
üî∂ OpenShift deployment detected
   ‚Ä¢ Routes may have been created automatically
   ‚Ä¢ Check: oc get routes -n {{ .Release.Namespace }}
   ‚Ä¢ SCC permissions applied for enterprise security
{{- end }}

üîß CONFIGURATION
================

Current configuration mode:
{{- if and .Values.platform (eq .Values.platform.type "openshift") }}
‚Ä¢ Platform: OpenShift
{{- else }}
‚Ä¢ Platform: Kubernetes
{{- end }}
‚Ä¢ Vector Database: {{ .Values.envVars.APP_VECTORSTORE_NAME | default "milvus" }}
‚Ä¢ LLM Model: {{ .Values.envVars.APP_LLM_MODELNAME | default "nvidia/llama-3.3-nemotron-super-49b-v1" }}
‚Ä¢ Reranker: {{ .Values.envVars.ENABLE_RERANKER | default "True" }}
‚Ä¢ Guardrails: {{ .Values.envVars.ENABLE_GUARDRAILS | default "False" }}

üìñ DOCUMENTATION
================

For detailed configuration and troubleshooting:
‚Ä¢ Chart documentation: See README.md in chart directory
‚Ä¢ API documentation: http://localhost:8081/docs (when port-forwarded)
‚Ä¢ NVIDIA RAG Blueprint docs: https://docs.nvidia.com/ai/

üö® TROUBLESHOOTING
==================

If pods are not starting:
{{- if and .Values.platform (eq .Values.platform.type "openshift") }}
oc describe pod POD_NAME -n {{ .Release.Namespace }}
oc logs POD_NAME -n {{ .Release.Namespace }}
{{- else }}
kubectl describe pod POD_NAME -n {{ .Release.Namespace }}
kubectl logs POD_NAME -n {{ .Release.Namespace }}
{{- end }}

Common issues:
‚Ä¢ Image pull errors: Check NGC API key configuration
‚Ä¢ SCC violations (OpenShift): May need anyuid SCC for some components
‚Ä¢ Resource constraints: Verify cluster has sufficient CPU/memory

Happy RAG building! üéâ